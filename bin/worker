#!/usr/bin/env ruby

require_relative '../config/bootstrap.rb'
require 'routemaster/services/thread_group'
require 'routemaster/services/worker'
require 'routemaster/services/ticker'
require 'routemaster/mixins/log'

include Routemaster::Mixins::Log

_log.info { 'creating thread group' }
Routemaster::Services::ThreadGroup.new.tap do |group|
  # ticker threads
  group.add Routemaster::Services::Ticker.new(
    queue: Routemaster.aux_queue, name: 'schedule', every: 1000, delay: false
  ), name: 'ticker.schedule'
  group.add Routemaster::Services::Ticker.new(
    queue: Routemaster.aux_queue, name: 'autodrop', every: 10_000
  ), name: 'ticker.autodrop'

  # aux worker thread
  group.add Routemaster::Services::Worker.new(
    queue: Routemaster.aux_queue
  ), name: "worker.aux"

  # main worker threads
  Integer(ENV.fetch('ROUTEMASTER_WORKER_THREADS')).times do |idx|
    group.add Routemaster::Services::Worker.new(
      queue: Routemaster.batch_queue
    ), name: "worker.main.#{idx + 1}"
  end

  _log.info { 'trapping signals for clean exit' }
  %w(INT TERM QUIT).each do |signal|
    Kernel.trap(signal) { Thread.new { group.stop } }
  end

  _log.info { 'job worker: started' }
  group.wait
end

_log.info { 'job worker: completed' }
Kernel.exit(0)
