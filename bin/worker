#!/usr/bin/env ruby

require_relative '../config/bootstrap.rb'
require 'routemaster/services/thread_group'
require 'routemaster/services/worker'
require 'routemaster/services/ticker'
require 'routemaster/mixins/log'

include Routemaster::Mixins::Log

_log.info { 'creating thread group' }
Routemaster::Services::ThreadGroup.new.tap do |group|
  # scheduler thread
  group.add Routemaster::Services::Ticker.new(lambda {
    jobs = Routemaster.batch_queue.schedule
    _log.debug { "scheduler: promoted #{jobs} jobs" }
  }, every: 100), name: 'scheduler'

  # worker threads
  Integer(ENV.fetch('ROUTEMASTER_WORKER_THREADS')).times do |idx|
    worker = Routemaster::Services::Worker.new(queue: Routemaster.batch_queue)
    group.add worker, name: "worker.#{idx + 1}"
  end

  _log.info { 'trapping signals for clean exit' }
  %w(INT TERM QUIT).each do |signal|
    Kernel.trap(signal) { Thread.new { group.stop } }
  end

  _log.info { 'job worker: started' }
  group.wait
end

_log.info { 'job worker: completed' }
Kernel.exit(0)
